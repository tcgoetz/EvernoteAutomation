<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>444.42</string>
	<key>AMApplicationVersion</key>
	<string>2.9</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>1.0.2</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run AppleScript.action</string>
				<key>ActionName</key>
				<string>Run AppleScript</string>
				<key>ActionParameters</key>
				<dict>
					<key>source</key>
					<string>tell application "Evernote"	activateend telltell application "System Events" to keystroke "c" using {command down}delay 1set html_hex to the clipboard as «class HTML»set temp_path to (path to "temp" from user domain as text) &amp; "temp.html"set temp_file to open for access file temp_path with write permissionset eof of temp_file to 0write html_hex to temp_fileclose access temp_fileget POSIX path of temp_path</string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.RunScript</string>
				<key>CFBundleVersion</key>
				<string>1.0.2</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunScriptAction</string>
				<key>InputUUID</key>
				<string>2E17BE1A-F777-40D1-B6E9-A3FE6E3A3995</string>
				<key>Keywords</key>
				<array>
					<string>Run</string>
				</array>
				<key>OutputUUID</key>
				<string>D7B2F35B-94BC-42A0-AB1C-46CCD63440F1</string>
				<key>UUID</key>
				<string>128525BC-D7C0-452E-BF99-DC5D24D0F979</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<string>on run {input, parameters}
	
	(* Your script goes here *)
	
	return input
end run</string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
				</dict>
				<key>conversionLabel</key>
				<integer>0</integer>
				<key>isViewVisible</key>
				<true/>
				<key>location</key>
				<string>772.000000:548.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run AppleScript.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<true/>
		</dict>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.cocoa.string</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>2.0.3</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>COMMAND_STRING</key>
					<dict/>
					<key>CheckedForUserDefaultShell</key>
					<dict/>
					<key>inputMethod</key>
					<dict/>
					<key>shell</key>
					<dict/>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.cocoa.string</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run Shell Script.action</string>
				<key>ActionName</key>
				<string>Run Shell Script</string>
				<key>ActionParameters</key>
				<dict>
					<key>COMMAND_STRING</key>
					<string>#!/usr/bin/python

"""Filter Evernote exported HTML."""

__author__ = "Tom Goetz"
__copyright__ = "Copyright Tom Goetz"
__license__ = "GPL"


import sys
from bs4 import BeautifulSoup
import string


from_note = False


class EvernoteHtmlFilter(object):
    """A class that implements filtering of Evernote exported note HTML."""

    printable = set(string.printable)

    remove_style_attribute_elements_base = [
        'font-family', '-webkit-text-stroke-width', 'letter-spacing', 'font-variant-ligatures', 'flex-basis', 'font-variant-caps',
        'text-indent', 'font-style', 'word-spacing', 'text-align', 'white-space', 'text-transform', 'font-weight'
    ]

    def __init__(self, html, from_clipboard=False):
        """Return a new EvernoteHtmlFilter instance."""
        self.html = filter(lambda x: x in self.printable, html)
        # parse and extract the note body
        if from_clipboard:
            self.soup = BeautifulSoup(self.html).find('div', {'style': '-en-clipboard:true;'})
        else:
            self.soup = BeautifulSoup(self.html).find('div', id='en-note')

    def style_element_name(self, style_selement):
        """Return the name of the style element."""
        return style_selement.split(':')[0].lstrip(' ')

    def filter_style_elements(self, style, remove_element_list=[], append_element_dict={}):
        """Filter elements from style attributes."""
        style_list = style.split(';')
        filtered_style = [item for item in style_list if not self.style_element_name(item) in remove_element_list and len(item) &gt; 0]
        for key, value in append_element_dict.iteritems():
            filtered_style.append(' %s: %s'  % (key, value))
        return ';'.join(filtered_style)

    def modify_styles(self, remove_attribute_elements):
        """Modify all style attributes."""
        for tag in self.soup.recursiveChildGenerator():
            if getattr(tag, 'attrs', None) is not None:
                for key, value in tag.attrs.iteritems():
                    if key == 'style':
                        tag.attrs[key] = self.filter_style_elements(value, remove_attribute_elements)

    def modify_tag(self, tag_name, modify_dict={}, add_style_dict={}):
        """Modify tags named tagname with values from a dict."""
        for tag in self.soup.find_all(tag_name):
            for key, value in modify_dict.iteritems():
                tag[key] = value
            tag['style'] = self.filter_style_elements(tag['style'], append_element_dict=add_style_dict)

    def remove_tag(self, tag_name, tag_id):
        """Remove tags named tagname."""
        for tag in self.soup.find_all(tag_name, id=tag_id):
            parent = tag.parent
            subtags = tag.extract().contents
            for subtag in subtags:
                parent.append(subtag)

    def filter(self, table_border=False, table_style_border=False, font_size=False, font_weight=False, table_border_color='black'):
        """Filter the HTML based on settings."""
        border_style = '1px solid %s' % table_border_color
        remove_style_attribute_elements = self.remove_style_attribute_elements_base
        if font_size:
            remove_style_attribute_elements.append('font-size')
        if font_weight:
            remove_style_attribute_elements.append('font-weight')
        if table_border or table_style_border:
            remove_style_attribute_elements.append('border')
        self.modify_styles(remove_style_attribute_elements)
        if table_border:
            self.modify_tag('table', modify_dict={'border': border_style})
        if table_style_border:
            self.modify_tag('table', add_style_dict={'border': border_style})
            self.modify_tag('td', add_style_dict={'border': border_style})

    def __str__(self):
        """Return a string representatin of the filtered output."""
        return str(self.soup)


def get_html(file=sys.stdin):
    """Retrieve the HTML content from a file."""
    html_content = ""
    for line in file:
        html_content = html_content + line
    return html_content


if (from_note):
    filter = EvernoteHtmlFilter(get_html())
else:
    # from clipboard
    filter = EvernoteHtmlFilter(get_html(open(sys.argv[1])), from_clipboard=True)
filter.filter(table_style_border=True, table_border_color='gray')

sys.stdout.write(str(filter))
</string>
					<key>CheckedForUserDefaultShell</key>
					<true/>
					<key>inputMethod</key>
					<integer>1</integer>
					<key>shell</key>
					<string>/usr/bin/python</string>
					<key>source</key>
					<string></string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.RunShellScript</string>
				<key>CFBundleVersion</key>
				<string>2.0.3</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunShellScriptAction</string>
				<key>InputUUID</key>
				<string>087EEF3D-12C1-41AE-A006-E757876C4175</string>
				<key>Keywords</key>
				<array>
					<string>Shell</string>
					<string>Script</string>
					<string>Command</string>
					<string>Run</string>
					<string>Unix</string>
				</array>
				<key>OutputUUID</key>
				<string>595DA028-B972-405F-8278-D2AD3E44B348</string>
				<key>UUID</key>
				<string>729C27C6-E1DC-43F1-88E8-C91FE7273F53</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<integer>0</integer>
						<key>name</key>
						<string>inputMethod</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
					<key>1</key>
					<dict>
						<key>default value</key>
						<string></string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>1</string>
					</dict>
					<key>2</key>
					<dict>
						<key>default value</key>
						<false/>
						<key>name</key>
						<string>CheckedForUserDefaultShell</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>2</string>
					</dict>
					<key>3</key>
					<dict>
						<key>default value</key>
						<string></string>
						<key>name</key>
						<string>COMMAND_STRING</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>3</string>
					</dict>
					<key>4</key>
					<dict>
						<key>default value</key>
						<string>/bin/sh</string>
						<key>name</key>
						<string>shell</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>4</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<true/>
				<key>location</key>
				<string>772.000000:910.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run Shell Script.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<true/>
		</dict>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<false/>
					<key>Types</key>
					<array>
						<string>com.apple.cocoa.attributed-string</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>1.2.1</string>
				<key>AMApplication</key>
				<array>
					<string>System</string>
				</array>
				<key>AMParameterProperties</key>
				<dict/>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<false/>
					<key>Types</key>
					<array>
						<string>com.apple.cocoa.attributed-string</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Copy to Clipboard.action</string>
				<key>ActionName</key>
				<string>Copy to Clipboard</string>
				<key>ActionParameters</key>
				<dict/>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.CopyToClipboard</string>
				<key>CFBundleVersion</key>
				<string>1.2.1</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<true/>
				<key>CanShowWhenRun</key>
				<false/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>AMCopyToClipboardAction</string>
				<key>InputUUID</key>
				<string>BAA0327D-8F9F-4966-9AB6-D286A159A5B7</string>
				<key>Keywords</key>
				<array>
					<string>Copy</string>
				</array>
				<key>OutputUUID</key>
				<string>13708DA5-6942-49E3-A398-0EE9E48340C9</string>
				<key>UUID</key>
				<string>8C29D10B-C909-405E-84CF-4D8A27656561</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>System</string>
				</array>
				<key>arguments</key>
				<dict/>
			</dict>
		</dict>
	</array>
	<key>connectors</key>
	<dict>
		<key>7D5AE0FA-BE87-4F44-B04E-67F2B0B538DE</key>
		<dict>
			<key>from</key>
			<string>729C27C6-E1DC-43F1-88E8-C91FE7273F53 - 729C27C6-E1DC-43F1-88E8-C91FE7273F53</string>
			<key>to</key>
			<string>8C29D10B-C909-405E-84CF-4D8A27656561 - 8C29D10B-C909-405E-84CF-4D8A27656561</string>
		</dict>
		<key>AE9B3AEB-43C8-4E12-A307-BCBD915D50DD</key>
		<dict>
			<key>from</key>
			<string>128525BC-D7C0-452E-BF99-DC5D24D0F979 - 128525BC-D7C0-452E-BF99-DC5D24D0F979</string>
			<key>to</key>
			<string>729C27C6-E1DC-43F1-88E8-C91FE7273F53 - 729C27C6-E1DC-43F1-88E8-C91FE7273F53</string>
		</dict>
	</dict>
	<key>workflowMetaData</key>
	<dict>
		<key>applicationBundleID</key>
		<string>com.evernote.Evernote</string>
		<key>applicationBundleIDsByPath</key>
		<dict>
			<key>/Applications/Evernote.app</key>
			<string>com.evernote.Evernote</string>
		</dict>
		<key>applicationPath</key>
		<string>/Applications/Evernote.app</string>
		<key>applicationPaths</key>
		<array>
			<string>/Applications/Evernote.app</string>
		</array>
		<key>inputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>outputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>presentationMode</key>
		<integer>11</integer>
		<key>processesInput</key>
		<integer>0</integer>
		<key>serviceApplicationBundleID</key>
		<string>com.evernote.Evernote</string>
		<key>serviceApplicationPath</key>
		<string>/Applications/Evernote.app</string>
		<key>serviceInputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>serviceOutputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>serviceProcessesInput</key>
		<integer>0</integer>
		<key>systemImageName</key>
		<string>NSActionTemplate</string>
		<key>useAutomaticInputType</key>
		<integer>0</integer>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.servicesMenu</string>
	</dict>
</dict>
</plist>
